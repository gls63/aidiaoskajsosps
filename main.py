import os
import requests
import zipfile
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext.filters import Filters
from telegram.ext.dispatcher import run_async
from telegram.constants import ParseMode
from telegram.inline.inlinekeyboardbutton import InlineKeyboardButton
from telegram.inline.inlinekeyboardmarkup import InlineKeyboardMarkup


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–∫–∞ —ç–º–æ–¥–∑–∏
def download_pack(update: Update, context):
    url = update.message.text.strip()
    if not url.startswith("https://t.me/addstickers/"):
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–∫ —ç–º–æ–¥–∑–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://t.me/addstickers/...")
        return

    try:
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–∫–µ—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        pack_name = url.split("/")[3]

        # –°–æ–∑–¥–∞–Ω–∏–µ zip-–∞—Ä—Ö–∏–≤–∞
        with zipfile.ZipFile(BytesIO(), "w") as zip_file:
            for file_url in response.text.splitlines():
                if not file_url.startswith("https://"):
                    continue

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_response = requests.get(file_url, headers={'User-Agent': 'Mozilla/5.0'})
                file_response.raise_for_status()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤
                zip_file.writestr(f"{pack_name}/{os.path.basename(file_url)}", file_response.content)

        zip_file.seek(0)
        update.message.reply_document(zip_file, filename=f"{pack_name}.zip", caption=f"–ü–∞–∫ —ç–º–æ–¥–∑–∏ —Å–∫–∞—á–∞–Ω! –°–∫–∞—á–∞—Ç—å?")

        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω–æ" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data=f"download_{pack_name}")]
        ])
        update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ \"–í–µ—Ä–Ω–æ\", —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —ç–º–æ–¥–∑–∏", reply_markup=keyboard
        )

    except requests.exceptions.RequestException as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω–æ"
@run_async
def download_callback(update: Update, context):
    query = update.callback_query
    data = query.data

    if data.startswith("download_"):
        pack_name = data.split("_")[1]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å —ç–º–æ–¥–∑–∏
        with open(f"{pack_name}.zip", "rb") as file:
            query.message.reply_document(
                file, filename=f"{pack_name}.zip", caption=f"–ü–∞–∫ —ç–º–æ–¥–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
            )
        os.remove(f"{pack_name}.zip") # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
def show_menu(update: Update, context):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –ø–∞–∫ —ç–º–æ–¥–∑–∏", callback_data="download_pack"),
                InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"),
            ]
        ]
    )
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
def show_help(update: Update, context):
    update.message.reply_text(
        "–Ø –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã —ç–º–æ–¥–∑–∏ —Å Telegram! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/addstickers/...`."
    )


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@run_async
def menu_callback(update: Update, context):
    query = update.callback_query
    data = query.data

    if data == "download_pack":
        query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–∫ —ç–º–æ–¥–∑–∏.")
    elif data == "help":
        show_help(update, context)

    query.answer()


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Updater
updater = Updater(TOKEN, use_context=True)
dispatcher = updater.dispatcher

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dispatcher.add_handler(CommandHandler("start", show_menu))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, download_pack))
dispatcher.add_handler(CallbackQueryHandler(download_callback))
dispatcher.add_handler(CallbackQueryHandler(menu_callback, pattern="^download_pack$|^help$"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
updater.start_polling()
updater.idle()